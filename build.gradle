/* Define Gradle plugins used in the project. */
plugins {
    id "net.minecraftforge.gradle.forge" version "6f5327738d"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "org.spongepowered.mixin" version "0.6-SNAPSHOT"
    id "java"
}

version = project.mod_ver
group = project.mod_group
archivesBaseName = project.mod_name

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

/* Define project dependencies, automatically shaded, added as annotation processors or simply defined as an implementation based on the parameters entered per dependency. */
Dependency[] deps = [
        new Dependency("xyz.matthewtgm", "TGMLib", "1.10", false, (String[]) ["mixin"]),
        new Dependency("xyz.matthewtgm", "JsonTGM", "1.3.1", true, (String[]) ["gson"]),
        new Dependency("xyz.matthewtgm", "TGMConfig", "1.7.3", true),
        new Dependency("org.spongepowered", "mixin", "0.7.11-SNAPSHOT", false, (String[]) ["launchwrapper", "guava", "gson", "commons-io"], true),
        new Dependency("org.projectlombok", "lombok", "1.18.16", false, true)
]

/* Define Minecraft options. Such as the Forge version, run directory and game mappings. */
minecraft {
    version = project.forge_ver
    runDir = "run"
    replace("@VER@": project.version)
    mappings = project.mc_mappings
}

/* Add available repositories to areas where dependencies can be downloaded. */
repositories {
    mavenCentral()
    maven {
        name = "SpongePowered"
        url = 'https://repo.spongepowered.org/maven/'
    }
    maven {
        name = "JitPack"
        url = 'https://jitpack.io/'
    }
}

/* Adds a configuration for shading libraries. */
configurations {
    shade
}

/* Define dependencies, also where dependencies are automatically handled. */
dependencies {
    for (Dependency dep : deps) {
        if (dep.isShade()) shade(dep.getFullDep()) {
            if (dep.getExcluded() != null && dep.getExcluded().length > 0)
                for (String excluded : dep.getExcluded())
                    exclude module: excluded
        }
        else implementation(dep.getFullDep()) {
            if (dep.getExcluded() != null && !Arrays.asList(dep.getExcluded()).isEmpty())
                for (String excluded : dep.getExcluded())
                    exclude module: excluded
        }
        if (dep.getAnnotationProc()) annotationProcessor(dep.getFullDep())
    }
}

/* Disable mixin refMap warnings. */
mixin {
    disableRefMapWarning = true
}

/* Set the duplicatesStrategy and define configs.  */
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest.attributes(
            'MixinConfigs': 'mixins.template.json',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'FMLCorePlugin': 'xyz.matthewtgm.template.forge.TemplateLoadingPlugin',
            'FMLCorePluginContainsFMLMod': true,
            'ForceLoadAsMod': true
    )
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

/* Makes the shade configuration work and re-define the duplicatesStrategy. */
shadowJar {
    configurations = [project.configurations.shade]
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier.set("")
}

/* Force the Gradle wrapper version and distrbution type. */
wrapper {
    gradleVersion = "6.1"
    distributionType = Wrapper.DistributionType.ALL
}

/* Process the mcmod.info. */
processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

/* Move the resources to the working directory for runs. */
task moveResources {
    doLast {
        ant.move file: "${buildDir}/resources/main",
                todir: "${buildDir}/classes/java"
    }
}

moveResources.dependsOn(processResources)
classes.dependsOn(moveResources)

/* Custom dependency stuff. */
@SuppressWarnings("unused")
class Dependency {

    String group
    String name
    String version
    String[] excluded
    boolean shade
    boolean annotationProc
    final String fullDep

    Dependency(String group, String name, String version, boolean shade) {
        this.group = group
        this.name = name
        this.version = version
        this.shade = shade
        this.excluded = []
        this.annotationProc = false

        this.fullDep = group + ":" + name + ":" + version
    }

    Dependency(String group, String name, String version, boolean shade, String[] excluded) {
        this.group = group
        this.name = name
        this.version = version
        this.shade = shade
        this.excluded = excluded
        this.annotationProc = false

        this.fullDep = group + ":" + name + ":" + version
    }

    Dependency(String group, String name, String version, boolean shade, boolean annotationProc) {
        this.group = group
        this.name = name
        this.version = version
        this.shade = shade
        this.excluded = []
        this.annotationProc = annotationProc

        this.fullDep = group + ":" + name + ":" + version
    }

    Dependency(String group, String name, String version, boolean shade, String[] excluded, boolean annotationProc) {
        this.group = group
        this.name = name
        this.version = version
        this.shade = shade
        this.excluded = excluded
        this.annotationProc = annotationProc

        this.fullDep = group + ":" + name + ":" + version
    }

}